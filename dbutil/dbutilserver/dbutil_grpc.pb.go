// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: dbutilserver/dbutil.proto

package dbutilserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DbUtil_ResetData_FullMethodName   = "/dbutilserver.DbUtil/ResetData"
	DbUtil_ResetSchema_FullMethodName = "/dbutilserver.DbUtil/ResetSchema"
)

// DbUtilClient is the client API for DbUtil service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A service to run higher-level commands
// on the database by gRPC.
type DbUtilClient interface {
	ResetData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CommandResult, error)
	ResetSchema(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CommandResult, error)
}

type dbUtilClient struct {
	cc grpc.ClientConnInterface
}

func NewDbUtilClient(cc grpc.ClientConnInterface) DbUtilClient {
	return &dbUtilClient{cc}
}

func (c *dbUtilClient) ResetData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CommandResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, DbUtil_ResetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbUtilClient) ResetSchema(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CommandResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, DbUtil_ResetSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbUtilServer is the server API for DbUtil service.
// All implementations must embed UnimplementedDbUtilServer
// for forward compatibility.
//
// A service to run higher-level commands
// on the database by gRPC.
type DbUtilServer interface {
	ResetData(context.Context, *emptypb.Empty) (*CommandResult, error)
	ResetSchema(context.Context, *emptypb.Empty) (*CommandResult, error)
	mustEmbedUnimplementedDbUtilServer()
}

// UnimplementedDbUtilServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDbUtilServer struct{}

func (UnimplementedDbUtilServer) ResetData(context.Context, *emptypb.Empty) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetData not implemented")
}
func (UnimplementedDbUtilServer) ResetSchema(context.Context, *emptypb.Empty) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSchema not implemented")
}
func (UnimplementedDbUtilServer) mustEmbedUnimplementedDbUtilServer() {}
func (UnimplementedDbUtilServer) testEmbeddedByValue()                {}

// UnsafeDbUtilServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbUtilServer will
// result in compilation errors.
type UnsafeDbUtilServer interface {
	mustEmbedUnimplementedDbUtilServer()
}

func RegisterDbUtilServer(s grpc.ServiceRegistrar, srv DbUtilServer) {
	// If the following call pancis, it indicates UnimplementedDbUtilServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DbUtil_ServiceDesc, srv)
}

func _DbUtil_ResetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUtilServer).ResetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbUtil_ResetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUtilServer).ResetData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbUtil_ResetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbUtilServer).ResetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbUtil_ResetSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbUtilServer).ResetSchema(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DbUtil_ServiceDesc is the grpc.ServiceDesc for DbUtil service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbUtil_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dbutilserver.DbUtil",
	HandlerType: (*DbUtilServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResetData",
			Handler:    _DbUtil_ResetData_Handler,
		},
		{
			MethodName: "ResetSchema",
			Handler:    _DbUtil_ResetSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbutilserver/dbutil.proto",
}
